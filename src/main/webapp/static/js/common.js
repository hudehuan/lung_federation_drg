var defaultValidateErrorPlacement = function(lable, element) {
    if (element.hasClass("l-textarea")) element.ligerTip({ content: lable.html(), appendIdTo: lable });
    else if (element.hasClass("l-text-field")) element.parent().ligerTip({ content: lable.html(), appendIdTo: lable });
    else lable.appendTo(element.parents("td:first").next("td"));
};

var defaultValidateSuccess = function(lable) {
    lable.ligerHideTip();
};

var deafultValidate = function(validateElements) {
    return validateElements.validate({
        errorPlacement: function(lable, element) {
            defaultValidateErrorPlacement(lable, element);
        },
        success: function(lable) {
            defaultValidateSuccess(lable);
        }
    });
};


function findDimensions_width() //函数：获取尺寸
{
    var winwidth = 0;
    //获取窗口宽度
    if (window.innerWidth)
        winwidth = window.innerWidth;
    else if ((document.body) && (document.body.clientWidth))
        winwidth = document.body.clientWidth;
    
    //通过深入Document内部对body进行检测，获取窗口大小   
    if (document.documentElement && document.documentElement.clientHeight && document.documentElement.clientWidth) {
        winwidth = document.documentElement.clientWidth;
    }
    return winwidth;
}

function findDimensions_height() //函数：获取尺寸   
{
    //获取窗口宽度
    var winheight = 0;
    
    //获取窗口高度   
    if (window.innerHeight)
        winheight = window.innerHeight;
    else if ((document.body) && (document.body.clientHeight))
        winheight = document.body.clientHeight;
    //通过深入Document内部对body进行检测，获取窗口大小   
    if (document.documentElement && document.documentElement.clientHeight && document.documentElement.clientWidth) {
        winheight = document.documentElement.clientHeight;
    }
    return winheight;
}


//iframe自适应高度
function SetCwinHeight(siframeid) {
    var iframeid = document.getElementById(siframeid);
    //iframe id
    if (document.getElementById) {
        if (iframeid && !window.opera) {
            if (iframeid.contentDocument && iframeid.contentDocument.body.offsetHeight)
            { iframeid.height = iframeid.contentDocument.body.offsetHeight; }
            else if (iframeid.Document && iframeid.Document.body.scrollHeight)
           { iframeid.height = iframeid.Document.body.scrollHeight; } } 
    } 
}
//$(function() {
//    if (jQuery.validator) {
//        //字母数字
//        jQuery.validator.addMethod("alnum", function(value, element) {
//            return this.optional(element) || /^[a-zA-Z0-9]+$/.test(value);
//        }, "只能包括英文字母和数字");

//        // 手机号码验证   
//        jQuery.validator.addMethod("cellphone", function(value, element) {
//            var length = value.length;
//            return this.optional(element) || (length == 11 && /^(1\d{10})$/.test(value));
//        }, "请正确填写手机号码");

//        // 电话号码验证   
//        jQuery.validator.addMethod("telephone", function(value, element) {
//            var tel = /^(\d{3,4}-?)?\d{7,9}$/g;
//            return this.optional(element) || (tel.test(value));
//        }, "请正确填写电话号码");

//        // 邮政编码验证
//        jQuery.validator.addMethod("zipcode", function(value, element) {
//            var tel = /^[0-9]{6}$/;
//            return this.optional(element) || (tel.test(value));
//        }, "请正确填写邮政编码");

//        // 汉字
//        jQuery.validator.addMethod("chcharacter", function(value, element) {
//            var tel = /^[\u4e00-\u9fa5]+$/;
//            return this.optional(element) || (tel.test(value));
//        }, "请输入汉字");

//        // 汉字
//        jQuery.validator.addMethod("qq", function(value, element) {
//            var tel = /^[1-9][0-9]{4,}$/;
//            return this.optional(element) || (tel.test(value));
//        }, "请输入正确的QQ");

//        // 用户名
//        jQuery.validator.addMethod("username", function(value, element) {
//            return this.optional(element) || /^[a-zA-Z][a-zA-Z0-9_]+$/.test(value);
//        }, "用户名格式不正确");
//    }
//});


var GetUrlParam = function(name) {
    var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
    var r = window.location.search.substr(1).match(reg);
    if (r != null) return unescape(r[2]); return null;
}

//通过正则获取url中的参数 用法 var name = getQueryStringRegExp(参数名称)
function getQueryStringRegExp(name) {
    var reg = new RegExp("(^|\\?|&)" + name + "=([^&]*)(\\s|&|$)", "i");
    if (reg.test(location.href)) return unescape(RegExp.$2.replace(/\+/g, " "));
    return "";
}
/*
JS 操作 URL 函数使用说明：
初始化 var myurl=new objURL(); //也可以自定义URL： var myurl=new objURL('http://www.111cn.net'); 
读取url参数值 var val=myurl.get('abc'); // 读取参数abc的值
设置url参数 myurl.set("arg",data); // 新增/修改 一个arg参数的值为data
移除url参数 myurl.remove("arg"); //移除arg参数
获取处理后的URL myurl.url();//一般就直接执行转跳 location.href=myurl.url();
调试接口：myurl.debug(); //修改该函数进行调试
*/
function objURL(url) {
    var ourl = url || window.location.href;
    var href = "";//?前面部分
    var params = {};//url参数对象
    var jing = "";//#及后面部分
    var init = function () {
        var str = ourl;
        var index = str.indexOf("#");
        if (index > 0) {
            jing = str.substr(index);
            str = str.substring(0, index);
        }
        index = str.indexOf("?");
        if (index > 0) {
            href = str.substring(0, index);
            str = str.substr(index + 1);
            var parts = str.split("&");
            for (var i = 0; i < parts.length; i++) {
                var kv = parts[i].split("=");
                params[kv[0]] = kv[1];
            }
        } else {
            href = ourl;
            params = {};
        }
    };
    this.set = function (key, val) {
        params[key] = encodeURIComponent(val);
    };
    this.remove = function (key) {
        if (key in params) params[key] = undefined;
    };
    this.get = function (key) {
        return params[key];
    };
    this.url = function (key) {
        var strurl = href;
        var objps = [];
        for (var k in params) {
            if (params[k]) {
                objps.push(k + "=" + params[k]);
            }
        }
        if (objps.length > 0) {
            strurl += "?" + objps.join("&");
        }
        if (jing.length > 0) {
            strurl += jing;
        }
        return strurl;
    };
    this.debug = function () {
        // 以下调试代码自由设置
        var objps = [];
        for (var k in params) {
            objps.push(k + "=" + params[k]);
        }
        alert(objps);//输出params的所有值
    };
    init();
}
//var SetButtons = function(toolbar, url) {
//    if (!url) {
//        url = '../service/SystemData.ashx?Action=GetButton';
//        url += '&MenuNo=' + GetUrlParam('MenuNo');
//    }
//    url += "&rnd" + Math.random();
//    $.getJSON(url, function(data) {
//        if (!data) return;
//        var buttons = [];
//        $(data).each(function(i, dataitem) {
//            var btn = { text: this.name, icon: this.icon, id: this.id };
//            if (f_btnClick) btn.click = f_btnClick;
//            buttons.push(btn);
//        });
//        toolbar.ligerToolBar({ items: buttons });
//    });
//};
//ajax动态刷新select,两个
function ajaxAddSelectOptions(url, target, target1) {
    target.empty();
    if (target1 != undefined)
        target1.empty();
    $.getJSON(url, function(json) {
        $(json).each(function(i) {
            var x = json[i];
            target.append("<option value='" + x.Id + "'>" + x.text + "</option>");
            if (target1 != undefined)
                target1.append("<option value='" +  x.Id  + "'>" +  x.text + "</option>");

        })
    });
}
////将一个Select拷到另一个Select
////转入 #select option 才行
//function CopySelectOptions(target, target1) {
//    target1.empty();
//    $(target).each(function() {              
//        target1.append("<option value='" + $(this).val() + "'>" + $(this).text() + "</option>");
//    });

//}


//通用的ajax提交方式
function JqueryPostData(posturl, postdata, tipMessage, Okmessage, callFun) {
 //   if (tipMessage != null && tipMessage != "")
 //       $.ligerDialog.waitting(tipMessage);

    $.ajax({
        url: posturl,
        data: postdata,
        type: 'post',
        dataType: 'json',
        contentType: 'application/json; charset=utf8',
        success: function(data) {
            if (data == null) {                
                return;
            }
            if (data.Type == "Success") {
                if (Okmessage != null && Okmessage != "") {
                    alert(Okmessage);
                }
                if (callFun != null)
                    callFun(data);
            }
            else {
                alert(data.Message);                
            }
        },
        error: function(xhr) {
            alert("出错了!<BR>" + xhr.Message);           
        },
        complete: function(XHR, TS) { XHR = null }
    });
}

// input只能输入数字和小数点
function DigitInput(el, e) {
    //8：退格键、46：delete、37-40： 方向键
    //48-57：小键盘区的数字、96-105：主键盘区的数字
    //110、190：小键盘区和主键盘区的小数
    //189、109：小键盘区和主键盘区的负号
    var e = e || window.event; //IE、FF下获取事件对象
    var cod = e.charCode || e.keyCode; //IE、FF下获取键盘码
    //小数点处理
    if (cod == 110 || cod == 190) {
        (el.value.indexOf(".") >= 0 || !el.value.length) && notValue(e);
    }
    else if (cod == 109) {
        (el.value.indexOf("-") >= 0 || !el.value.length) && notValue(e);
    }
    else {
        if (cod != 8 && cod != 46 && (cod < 37 || cod > 40) && (cod < 48 || cod > 57) && (cod < 96 || cod > 105)) notValue(e);
    }
    function notValue(e) {
        e.preventDefault ? e.preventDefault() : e.returnValue = false;
    }
}

//js得到一个月最大天数
function getDaysInMonth(year, month) {
    month = parseInt(month, 10) + 1;
    var temp = new Date(year + "/" + month + "/0");
    return temp.getDate();
}
//将ligerui多项选择Select控件的结果值转换
//原是 text1;text2
//转成 'a','b'这样的格式

function ligeruiSelectCheckValToNewStr(oldstr) {
    var strs = new Array(); //定义一数组
    var tmpstr = "";
    strs = oldstr.split(";"); //字符分割      
    for (i = 0; i < strs.length; i++) {
        tmpstr = tmpstr + '\'' + strs[i] + '\',';
    }
    return tmpstr.substring(0, tmpstr.length - 1);
}


//得到表格的列数
function getTableCols(tableObject) {
    var tableObject = _table = document.getElementById(tableObject); //将传入字符串转化为table对象
    //    if (!tableObject.rows.item || !tableObject.rows.item(0) || !tableObject.rows.item(0).cells) {
    //        return 0;
    //    }
    var cells = tableObject.rows.item(0).cells;
    var cols = 0;
    for (var col = 0; col < cells.length; col++) {
        if (cells[col].colSpan && cells[col].colSpan > 1) {
            cols = cols + cells[col].colSpan;
        }
        else {
            cols = cols + 1;
        }
    }
    return cols;
}


function arrayToJson(o) {
    var r = [];
    if (typeof o == "string") return "\"" + o.replace(/([\'\"\\])/g, "\\$1").replace(/(\n)/g, "\\n").replace(/(\r)/g, "\\r").replace(/(\t)/g, "\\t") + "\"";
    if (typeof o == "object") {
        if (!o.sort) {
            for (var i in o)
                r.push(i + ":" + arrayToJson(o[i]));
            if (!!document.all && !/^\n?function\s*toString\(\)\s*\{\n?\s*\[native code\]\n?\s*\}\n?\s*$/.test(o.toString)) {
                r.push("toString:" + o.toString.toString());
            }
            r = "{" + r.join() + "}";
        } else {
            for (var i = 0; i < o.length; i++) {
                r.push(arrayToJson(o[i]));
            }
            r = "[" + r.join() + "]";
        }
        return r;
    }
    return o.toString();
}


function SetCookie(name, value, daynum)//三个参数，一个是cookie的名子，一个是值,一个保存的时间
{
    var Days = daynum; //此 cookie 将被保存 30 天
    var exp = new Date(); //new Date("December 31, 9998");
    exp.setTime(exp.getTime() + Days * 24 * 60 * 60 * 1000);
    document.cookie = name + "=" + escape(value) + ";expires=" + exp.toGMTString();
}
function getCookie(name)//读取cookies函数 
{
    var arr = document.cookie.match(new RegExp("(^| )" + name + "=([^;]*)(;|$)"));
    if (arr != null) return unescape(arr[2]); return null;

}
function delCookie(name)//删除cookie
{
    var exp = new Date();
    exp.setTime(exp.getTime() - 1);
    var cval = getCookie(name);
    if (cval != null) document.cookie = name + "=" + cval + ";expires=" + exp.toGMTString();
}

///iframc内存释放
function iframDestroy(iframemc) {

    $("#" + iframemc).unbind();
    $("#" + iframemc).attr("src", 'about:blank');
    var edtframe = document.getElementById(iframemc).contentWindow;
    if (typeof (edtframe.document) == 'object') {
        edtframe.document.open();
        edtframe.document.write('');
        edtframe.document.close();
    }
}


//获取 select 为 multiple 选中text
function GetdropdownchecklistText(selectid) {
    var text = "";
    var vcl = $("#" + selectid).find("option:selected");
   vcl.each(function() {
        if ($(this).prop("selected")) {
            text += $(this).text() + ",";
        }
    });
    if (text.length > 0) {
        text = text.substring(0, text.length - 2);
    }
    return text;
}

//为 select 通过text 来选中下接项
function SetSelect_TextToSelected(selectid, text) {
    var count = $("#"+selectid+" option").length;

    for (var i = 0; i < count; i++) {
        if ($("#" + selectid).get(0).options[i].text == text) {
            $("#" + selectid).get(0).options[i].selected = true;
            break;
        }
    }
}

//根据asptext 内容 自动定位到 aspx listbox内容
function SetListBoxSelect(textBoxID, listBoxID) {
    var inputText = $.trim($("#" + textBoxID.toString()).val());
    if (inputText.length != 0) {
        for (var i = 0; i < document.getElementById(listBoxID.toString()).options.length; i++) {
            document.getElementById(listBoxID).options[i].selected = false;
        }

        var sInputName = inputText.toUpperCase();
        var iStopFlag = -1;
        var iIndex = 0;
        var sText;
        while (iIndex < document.getElementById(listBoxID).options.length && iStopFlag == -1) {
            sText = document.getElementById(listBoxID).options[iIndex].text.toUpperCase();
            if (sText.indexOf(sInputName) != -1) {
                document.getElementById(listBoxID).options[iIndex].selected = true;
                break;
                //iStopFlag = 0;  
            }
            iIndex++;
        }
    }
}


function CreateLoadWaitDiv() {

//  var leftW = 300;  
//  if(width>1200){  
//     leftW = 500;  
//  }else if(width>1000){  
//     leftW = 350;  
//  }else {  
//     leftW = 100;  
//  }  
        
    var _html = ' <div  id ="bi-repopt-load" style="position:absolute;  cursor:wait;  width:95%;  background-color: rgba(192, 195, 195, 0.50);' +
        'filter:progid:DXImageTransform.Microsoft.Gradient(startColorstr=#55313131, endColorstr=#55313131);' +
        'height:94%;min-height:94%;  z-index:9999999;top :2.5%;left:2.5%;">' +
         '<div id="bi-repopt-load-memo"  style="position:relative; top:35%; margin:0 auto; width:220px; padding-left:3px; line-height:55px; height:60px;background-color:white; -moz-border-radius: 5px; -webkit-border-radius: 5px; border-radius:5px;">' +
            '<span style="display:inline-block;vertical-align:middle;">' +
                 '<img src="/img/load.gif" />' +
            '</span>' +
            '<span style="font-size:14px;display:inline-block;text-indent:5px;color:#383838">' +
            '请等待,这需要一点时间....</span>' +
                 '</div>' +
          '</div>'
    $(_html).appendTo("body");

//  var _html = "<div id ='bi-repopt-load' style=' position:absolute;  cursor1:wait;left:"+leftW+"px;top:200px;width:auto;height:35px;padding:12px 5px 10px 30px; " +
//              " background:#fff url(/wlzl/js/themes/default/images/pagination_loading.gif) no-repeat scroll 5px 10px;border:2px solid #ccc;color:#000;>"+
//              " 数据加载中，请等待... </div>";
  //document.body.appendChild(_html);                               
}

function CloseLoadWaitDiv() {
    var _mask = document.getElementById('bi-repopt-load');
    _mask.parentNode.removeChild(_mask);

}

Date.prototype.pattern = function(fmt) {
    var o = {
        "M+": this.getMonth() + 1, //月份        
        "d+": this.getDate(), //日        
        "h+": this.getHours() % 12 == 0 ? 12 : this.getHours() % 12, //小时        
        "H+": this.getHours(), //小时        
        "m+": this.getMinutes(), //分        
        "s+": this.getSeconds(), //秒        
        "q+": Math.floor((this.getMonth() + 3) / 3), //季度        
        "S": this.getMilliseconds() //毫秒        
    };
    var week = {
        "0": "\u65e5",
        "1": "\u4e00",
        "2": "\u4e8c",
        "3": "\u4e09",
        "4": "\u56db",
        "5": "\u4e94",
        "6": "\u516d"
    };
    if (/(y+)/.test(fmt)) {
        fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
    }
    if (/(E+)/.test(fmt)) {
        fmt = fmt.replace(RegExp.$1, ((RegExp.$1.length > 1) ? (RegExp.$1.length > 2 ? "\u661f\u671f" : "\u5468") : "") + week[this.getDay() + ""]);
    }
    for (var k in o) {
        if (new RegExp("(" + k + ")").test(fmt)) {
            fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
        }
    }
    return fmt;
}

function get_lastDate(ymd, ym, n) {
  
    ymd = ymd ? new Date(ymd.replace(/-/g, "/")) : new Date();
    if (ym == "md") { //当月最后一天
        var new_year = ymd.getFullYear();    //取当前的年份
        var new_month = ymd.getMonth()+1; //取下一个月的第一天，方便计算（最后一天不固定）        
        if (ymd.getMonth() > 12) {
            new_month -= 12;        //月份减          
            new_year++;            //年份增          
        }
        var sdate = new Date(new_year, new_month, 0).getDate();                      
        ymd = new Date(ymd.getFullYear(), ymd.getMonth(), sdate);
    }
    else {

        ym && (ym == "y" ? ymd.setFullYear(ymd.getFullYear() - 1) : ymd.setMonth(ymd.getMonth() - 1));
        n && ymd.setDate(ymd.getDate() + n);
    }  
    return ymd.pattern("yyyy-MM-dd");
}

function getinputdate(strdate, lx) {
   
    var count = strdate.split("-").length;
    if (count == 1) //年
    {
        if (lx == 0)
            return strdate + "-01-01";
        else
            return strdate + "-12-31";
    }
    else if (count == 2) //月
    {
        if (lx == 0)
            return strdate + "-01";
        else
          return  get_lastDate(strdate + "-01", "md");
    }
    else
        return strdate;
}
//function get_lastDate(ymd, ym, n) {
//    ymd = ymd ? new Date(ymd.replace(/-/g, "/")) : new Date();
//    ym && (ym == "y" ? ymd.setFullYear(ymd.getFullYear() - 1) : ymd.setMonth(ymd.getMonth() - 1));
//    n && ymd.setDate(ymd.getDate() + n);
//    return ymd.toLocaleDateString().match(/\d+/g).join('-');
//}
/*
 get_lastDate();//返回当前日期   
    get_lastDate("","y");//返回当前去年的日期   
    get_lastDate("","y",-1);//返回当前去年前一天的日期   
    get_lastDate("","y",1);//返回当前去年后一天的日期   
    get_lastDate("","m");//返回当前上个月的日期   
    get_lastDate("","m",-1);//返回当前上个月前一天日期   
    get_lastDate("","m",1);//返回当前上个月后一天日期   
    get_lastDate("","",1);//返回明天日期   
    get_lastDate("","",-1);//返回昨天日期   
    get_lastDate("2012-6-1","",-1);//返回2012-6-1前一天的日期   
    get_lastDate("2012-6-30","",1);//返回2012-6-1后一天的日期  
*/


///生成随机 N 位的字符串
function randomChar(n) {
    var x = "0123456789abcdefqwertyuioplkjhgfdsazxcvbnmAKHHIYBWDCNSBPWNDSSDSDOEIS";
    var tmp = "";
    var timestamp = new Date().getTime();
    for (var i = 0; i < n; i++) {
        tmp += x.charAt(Math.ceil(Math.random() * 100000000) % x.length);
    }
    return timestamp + tmp;
}


/**
* 定义ForceWindow类构造函数
* 无参数
* 无返回值
*/
function ForceWindow() {
    this.r = document.documentElement;
    this.f = document.createElement("FORM");
    this.f.target = "_blank";
    this.f.method = "post";
    this.r.insertBefore(this.f, this.r.childNodes[0]);
}

/**
* 定义open方法
* 参数sUrl：字符串，要打开窗口的URL。
* 无返回值
*/
ForceWindow.prototype.open = function (sUrl) {
    this.f.action = sUrl;
    this.f.submit();
    window.open(sUrl, "_blank");
}

//window.force = new ForceWindow();

/**
* 实例化一个ForceWindow对象并做为window对象的一个子对象以方便调用
* 定义后可以这样来使用：window.force.open("URL");
var  mywindow.force = new ForceWindow();
* myWindow.open("URL");
*/

///得到拼音码首字符大写
var strChineseFirstPY = "";

//返回值:拼音首字母串数组  
function getpym(str) {
    var pym = "";
    for (var i = 0, len = str.length; i < len; i++)
        pym += checkCh(str.charAt(i));
    return pym;
}

function checkCh(ch) {
    var uni = ch.charCodeAt(0);
    if (uni > 40869 || uni < 19968)
        return ch; //dealWithOthers(ch);  
    return strChineseFirstPY.charAt(uni - 19968);
}

function SetDhtmlGridColWidth(grid)
{
    var colwidth = 0;
    var colNum = grid.getColumnsNum();
    var winwidth = findDimensions_width()
    for (var i = 0 ; i<colNum; i++)
    {
        colwidth += grid.getColWidth(i);
    }
    if (colwidth < winwidth)
    {
        grid.setColWidth(colNum-1, winwidth - colwidth + grid.getColWidth(colNum - 1));
    }

}


/*!
* jQuery Library v2.2
* 说明：Jquery通用库
* 创建时间: sunkaixuan 2014-8-22  
* 修改时间:2016-8-2
*/
(function (window, jQuery, undefined) {

    jQuery.extend({
        /*随机值*/
        random: {
            //获取0-maxNum之间的随机数字
            getNum: function (maxNum) {
                return $.random.getNumBetween(0, maxNum);
            },
            //获取min-max之间的随机数字
            getNumBetween: function (min, max) {
                max = max + 1;
                return Math.floor(Math.random() * (max - min)) + min;
            },
            //获取长度为length的随机数字
            getNumByLength: function (length) {
                var array = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
                var reval = "";
                for (var i = 0; i < length; i++) {
                    reval += array[$.random.getNumBetween(0, array.length - 1)];
                }
                return reval
            },
            //获取长度为minLength-maxLength之间的随机数
            getNumBetweenLength: function (minLength, maxLength) {
                var length = $.random.getNumBetween(minLength, maxLength);
                return $.random.getNumByLength(length);
            },
            //获取长度wordLength（数字、字母）组成的字符串
            getWord: function (wordLength) {
                var array = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];
                var reval = "";
                for (var i = 0; i < wordLength; i++) {
                    reval += array[$.random.getNumBetween(0, array.length - 1)];
                }
                return reval;
            },
            //获取长度为minLength-maxLength之间的随机（数字、字母）组成的字符串
            getWordBetweenLength: function (minLength, maxLength) {
                var length = $.random.getNumBetween(minLength, maxLength);
                return $.random.getWord(length);
            },
            getGuid: function () {
                return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                    return v.toString(16);
                });
            }
        },

        /*linq*/
        linq: {
            contains: function (thisVal, cobj) {
                if (jQuery.valiData.isEmpty(thisVal)) {
                    return false;
                }
                return thisVal.toString().lastIndexOf(cobj.toString()) != -1;
            },
            /*where*/
            where: function (obj, action) {
                if (action == null) return;
                var reval = new Array();
                $(obj).each(function (i, v) {
                    if (action(v)) {
                        reval.push(v);
                    }
                })
                return reval;
            },
            single: function (obj, action) {
                if (action == null) return;
                var reval = null;
                $(obj).each(function (i, v) {
                    if (action(v)) {
                        reval = (v);
                    }
                })
                return reval;
            },
            remove: function (obj, action) {
                var removeItem = $.linq.single(obj, action);
                obj.splice(jQuery.inArray(removeItem, obj), 1);
            },
            /*any*/
            any: function (obj, action) {
                if (action == null) return;
                var reval = false;
                $(obj).each(function (i, v) {
                    if (action(v)) {
                        reval = true;
                        return false;
                    }
                })
                return reval;
            },
            /*select*/
            select: function (obj, action) {
                if (action == null) return;
                var reval = new Array();
                $(obj).each(function (i, v) {
                    reval.push(action(v));
                });
                return reval;
            },
            /*each*/
            each: function (obj, action) {
                if (action == null) return;
                jQuery(obj).each(function (i, v) {
                    action(i, v);
                });
            },
            /*first*/
            first: function (obj, action) {
                if (action == null) return;
                var reval = new Array();
                $(obj).each(function (i, v) {
                    if (action(v)) {
                        reval.push(v);
                        return false;
                    }
                })
                return reval[0];
            },
            order: function (obj, field, orderByType) {
                var p = obj;
                p.sort(function down(x, y) {
                    if (orderByType != null && orderByType.toLocaleLowerCase() == "desc") {
                        return (x[field] < y[field]) ? 1 : -1;
                    } else {
                        return (x[field] > y[field]) ? 1 : -1;
                    }

                })
                return p;
            }

        },

        /*操作*/
        action: {
            url: function (actionName, hid, controllerName, areaName) {
                if (hid == null) {
                    hid = "HidUrlAction";
                }
                var isAction = controllerName == null && areaName == null;
                var isControllerName = areaName == null && controllerName != null;
                var isArea = areaName != null;
                var hidValue = $("#" + hid).val();
                var regValue = hidValue.match("(^.*)/(.+)/(.+)/$");
                var virtualDirectory = regValue[1];
                if (isAction) {
                    return hidValue + actionName;
                } else if (isControllerName) {
                    areaName = regValue[2]
                    return (virtualDirectory + "/" + areaName + "/" + controllerName + "/" + actionName);
                } else if (isArea) {
                    return (virtualDirectory + "/" + areaName + "/" + controllerName + "/" + actionName);
                }
            },

            //移除最后一个字符
            trimEnd: function (str, c) {
                var reg = new RegExp(c + "([^" + c + "]*?)$");
                return str.replace(reg, function (w) { if (w.length > 1) { return w.substring(1); } else { return ""; } });
            },
            htmlEncode: function (str) {
                return str.replace(/&/g, '&amp').replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
            },
            htmlDecode: function (str) {
                return str.replace(/&amp;/g, '&').replace(/&quot;/g, '\"').replace(/&lt;/g, '<').replace(/&gt;/g, '>');
            },
            textEncode: function (str) {
                str = str.replace(/&amp;/gi, '&');
                str = str.replace(/</g, '&lt;');
                str = str.replace(/>/g, '&gt;');
                return str;
            },
            textDecode: function (str) {
                str = str.replace(/&amp;/gi, '&');
                str = str.replace(/&lt;/gi, '<');
                str = str.replace(/&gt;/gi, '>');
                return str;
            },
            //获取json的key和value
            jsonDictionary: function (json, key) {
                var reval = new Array();
                for (key in json) {
                    reval.push({ key: key, value: json[key] });
                }
                return reval;
            },
            insertStr: function (str1, n, str2) {
                if (str1.length < n) {
                    return str1 + str2;
                } else {
                    s1 = str1.substring(0, n);
                    s2 = str1.substring(n, str1.length);
                    return s1 + str2 + s2;
                }
            },
            //替换所有字符
            replaceAll: function (str, findStr, reStr) {
                var reg = new RegExp(findStr, "g");
                return str.replace(reg, reStr);

            },
            setTimeoutWidthNum: function (fun, time, number) {
                if (fun != null) {
                    setTimeout(function () {
                        fun();
                        number--;
                        if (number > 0) {
                            $.action.setTimeoutWidthNum(fun, time, number);
                        }
                    }, time)
                }
            },
            //循环执行检测元素值是否有值当有值执行回调函数,超时停止检测
            elementValueReady: function (selector, fun, time) {
                var selObj = $(selector);
                if (time == null) time = 0;
                time = time + 50;
                if (time > 5000) {//间隔超过5秒则停止检测
                    return;
                }
                setTimeout(function () {
                    var val = "";
                    try {
                        val = selObj.val();
                    } catch (e) {

                    }
                    var valIsNull = val == null || val == "";
                    if (valIsNull) {
                        $.action.elementValueReady(selector, fun, time);
                    } else {
                        fun();
                    }
                }, time);

            },
            //循环执行检测选择器的元素如果存在该元素，则执行回调函数过，超过停止检测
            elementNullComplate: function (selector, fun, time) {
                var selObj = $(selector)
                if (time == null) time = 0;
                time = time + 50;
                if (time > 5000) {//间隔超过5秒则停止检测
                    return;
                }
                setTimeout(function () {
                    if (selObj.size() > 0) {
                        $.action.elementNullComplate(selector, fun, time);
                    } else {
                        fun();
                    }
                }, time);

            }

        },

        /*日期时间处理*/
        getdate: {
            //获取当前日期
            getPresentDate: function () {
                var mydate = new Date();
                var str = "" + mydate.getFullYear() + "-";
                str += (mydate.getMonth() + 1) + "-";
                str += mydate.getDate();
                return str;
            },
            //获取当前日期之前的年月date为日期"2016-6",number>0&<11月数 -leo
            //例:getfirsthalf("2016-06",5) 返回半年内的年月数组
            getfirsthalf: function (date, number) {
                var d = new Date(date.replace(/[^\d]/g, "/") + "/1");
                var result = [date];
                for (var i = 0; i < number; i++) {
                    d.setMonth(d.getMonth() - 1);
                    var m = d.getMonth() + 1;
                    m = m < 10 ? "0" + m : m;
                    result.push(d.getFullYear() + "-" + m);
                }
                return result;
            },
            //获取一个月天数 or 最后一天  tpye=Day返回天数  否则返回最后一天日期-leo
            getLastDay: function (year, month, dateTpye) {
                debugger
                var new_year = year;    //取当前的年份
                var new_month = month++;//取下一个月的第一天，方便计算（最后一天不固定）  
                if (month > 12)            //如果当前大于12月，则年份转到下一年           
                {
                    new_month -= 12;        //月份减            
                    new_year++;            //年份增           
                }
                var new_date = new Date(new_year, new_month + 1, 1);                //取当年当月中的第一天           
                var date_count = (new Date(new_date.getTime() - 1000 * 60 * 60 * 24)).getDate();//获取当月的天数       
                var last_date = new Date(new_date.getTime() - 1000 * 60 * 60 * 24);//获得当月最后一天的日期 
                if (dateTpye == 'dayNum') {
                    return date_count;
                }
                else {
                    return last_date;
                }
            },
            //获取两个时间相差天数-leo
            //计算sDate1 - sDate2 得到相差天数    2016-06-18格式  
            getdatedifference: function (sDate1, sDate2) {
                var aDate, oDate1, oDate2, iDays
                aDate = sDate1.split("-")
                oDate1 = new Date(aDate[1] + '-' + aDate[2] + '-' + aDate[0])    //转换为12-18-2006格式  
                aDate = sDate2.split("-")
                oDate2 = new Date(aDate[1] + '-' + aDate[2] + '-' + aDate[0])
                iDays = parseInt(Math.abs(oDate1 - oDate2) / 1000 / 60 / 60 / 24)    //把相差的毫秒数转换为天数  
                return iDays
            },
            //比较两个时间大小
            checkEndTime: function (startTime, endTime) {
                var starttime = String(startTime).replace("-", "/").replace("-", "/")
                var start = new Date(starttime);
                var endtime = String(endTime).replace("-", "/").replace("-", "/")
                var end = new Date(endtime);
                if (end < start) {
                    return "Small";
                }
                else if (end > start) {
                    return "large";
                }
                else {
                    return "equal";
                }
            }

        },

        /*转换*/
        convert: {
            //还原json格式的时间
            jsonReductionDate: function (cellval, format) {
                try {
                    if (cellval == "" || cellval == null) return "";
                    var date = new Date(parseInt(cellval.substr(6)));
                    if (format == null) {
                        var month = date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1;
                        var currentDate = date.getDate() < 10 ? "0" + date.getDate() : date.getDate();
                        return date.getFullYear() + "-" + month + "-" + currentDate;
                    } else {
                        return $.convert.toDate(date, format);
                    }
                } catch (e) {
                    return "";
                }
            },
            jsonToStr: function (object) {
                var type = typeof object;
                if ('object' == type) {
                    if (Array == object.constructor) type = 'array';
                    else if (RegExp == object.constructor) type = 'regexp';
                    else type = 'object';
                }
                switch (type) {
                    case 'undefined':
                    case 'function':
                    case 'unknown':
                        return;
                        break;
                    case 'function':
                    case 'boolean':
                    case 'regexp':
                        return object.toString();
                        break;
                    case 'number':
                        return isFinite(object) ? object.toString() : 'null';
                        break;
                    case 'string':
                        return '"' + object.replace(/(\\|\")/g, "\\$1").replace(/\n|\r|\t/g, function () {
                            var a = arguments[0];
                            return (a == '\n') ? '\\n' : (a == '\r') ? '\\r' : (a == '\t') ? '\\t' : ""
                        }) + '"';
                        break;
                    case 'object':
                        if (object === null) return 'null';
                        var results = [];
                        for (var property in object) {
                            var value = jQuery.convert.jsonToStr(object[property]);
                            if (value !== undefined) results.push(jQuery.convert.jsonToStr(property) + ':' + value);
                        }
                        return '{' + results.join(',') + '}';
                        break;
                    case 'array':
                        var results = [];
                        for (var i = 0; i < object.length; i++) {
                            var value = jQuery.convert.jsonToStr(object[i]);
                            if (value !== undefined) results.push(value);
                        }
                        return '[' + results.join(',') + ']';
                        break;
                }
            },
            strToJson: function (str) {
                return jQuery.parseJSON(str);
            },
            toDate: function (date, format) {
                var data = new Date(date);
                var o = {
                    "M+": data.getMonth() + 1, //month
                    "d+": data.getDate(), //day
                    "h+": data.getHours(), //hour
                    // "H+": date.getHours(), //hour
                    "m+": data.getMinutes(), //minute
                    "s+": data.getSeconds(), //second
                    "q+": Math.floor((data.getMonth() + 3) / 3), //quarter
                    "S": data.getMilliseconds() //millisecond
                }
                if (/(y+)/.test(format)) format = format.replace(RegExp.$1,
                (data.getFullYear() + "").substr(4 - RegExp.$1.length));
                for (var k in o) if (new RegExp("(" + k + ")").test(format))
                    format = format.replace(RegExp.$1,
                RegExp.$1.length == 1 ? o[k] :
                ("00" + o[k]).substr(("" + o[k]).length));
                return format;
            },
            toInt: function (par) {
                if (par == null || par == NaN || par == "") return 0;
                return parseInt(par);
            },
            toNumber: function (obj, pointNum) {
                if ($.valiData.isDecimal(obj)) {
                    var num = parseFloat(obj) + "";
                    if (num.lastIndexOf(".") == -1) {
                        return parseFloat(num);
                    } else {
                        var index = num.indexOf(".");
                        var length = num.length;
                        if ((length - index - 1) > pointNum) {
                            return parseFloat(parseFloat(num).toFixed(pointNum));
                        } else {
                            return parseFloat(num);
                        }
                    }
                } else {
                    return 0;
                }
            },
            toFloat: function (par) {
                if (par == null || par == NaN || par == "") return 0;
                return parseFloat(par);
            },
            xmlToJQuery: function (data) {
                var xml;
                if ($.browser.msie) {// & parseInt($.browser.version) < 9
                    xml = new ActiveXObject("Microsoft.XMLDOM");
                    xml.async = false;
                    xml.loadXML(data);
                    // xml = $(xml).children('nodes'); //这里的nodes为最顶级的节点
                } else {
                    xml = data;
                }
                return $(xml);
            },
            //将标准时间转换成时间格式-leo
            //day: Thu Aug 22 2013 15:12:00 GMT+0800 (中国标准时间)   format: yyyy-MM-dd hh:mm:ss
            standardTimeToDateTime: function (day, format) {
                var dateTime = new Date(day);
                var tostr = function (i) {
                    return (i < 10 ? '0' : '') + i
                };
                return format.replace(/yyyy|MM|dd|HH|mm|ss/g, function (item) {
                    switch (item) {
                        case 'yyyy':
                            return tostr(dateTime.getFullYear());
                            break;
                        case 'MM':
                            return tostr(dateTime.getMonth() + 1);
                            break;
                        case 'mm':
                            return tostr(dateTime.getMinutes());
                            break;
                        case 'dd':
                            return tostr(dateTime.getDate());
                            break;
                        case 'HH':
                            return tostr(dateTime.getHours());
                            break;
                        case 'ss':
                            return tostr(dateTime.getSeconds());
                            break;
                    }
                })
            }
        },

        /*数据验证*/
        valiData: {
            isEmpty: function (val) { return val == undefined || val == null || val == "" || val.toString() == ""; },
            isZero: function (val) { return val == null || val == "" || val == 0 || val == "0"; },
            //判断是否为数字
            isNumber: function (val) { return (/^\d+$/.test(val)); },
            //是否是邮箱
            isMail: function (val) { return (/^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/.test(val)); },
            //是否是手机
            isMobilePhone: function (val) { return (/\d{11}$/.test(val)); },
            //判断是否为负数和整数
            isNumberOrNegative: function (val) { return (/^\d+|\-\d+$/.test(val)); },
            //金额验证
            isMoney: function (val) { return (/^[1-9]d*.d*|0.d*[1-9]d*|\d+$/.test(val)); },
            isDecimal: function (val) { return (/^(-?\d+)(\.\d+)?$/.test(val)); }

        },

        /*类型验证*/
        valiType: {
            isArray: function (obj) { return (typeof obj == 'object') && obj.constructor == Array; },
            isString: function (str) { return (typeof str == 'string') && str.constructor == String; },
            isDate: function (obj) { return (typeof obj == 'object') && obj.constructor == Date; },
            isFunction: function (obj) { return (typeof obj == 'function') && obj.constructor == Function; },
            isArrayLike: function (obj) {
                if (obj == null || isWindow(obj)) {
                    return false;
                }
                var length = "length" in Object(obj) && obj.length;

                if (obj.nodeType === NODE_TYPE_ELEMENT && length) {
                    return true;
                }

                return isString(obj) || isArray(obj) || length === 0 ||
                       typeof length === 'number' && length > 0 && (length - 1) in obj;
            },
            isObject: function (obj) { return (typeof obj == 'object') && obj.constructor == Object; }
        },

        pageHelper: {
            referenceFile: function (url, type) {
                $(function () {
                    var isJs = type == "js";
                    if (isJs) {
                        var isAny = $("[src='" + url + "']").size() > 0;
                        if (!isAny)
                            $("head").append("<script src='" + url + "' /> ");
                    }
                    else {
                        var isAny = $("[href='" + url + "']").size() > 0;
                        if (!isAny)
                            $("head").append("<link href='" + url + "'rel='stylesheet' >");
                    }
                })
            }
        },

        //定位
        position: {
            //使页面元素上下左右居中
            center: function (eleSelector) {
                var obj = $(eleSelector);
                if (obj.size() > 0) {
                    obj.each(function () {
                        var obj = $(this);
                        var wh = $(window).height();
                        var ww = $(window).width();
                        var scrh = $(document).scrollTop();
                        var objh = obj.height();
                        var objw = obj.width();
                        var top = scrh + ((wh - objh) / 2);
                        var left = ww / 2 - objw / 2;
                        if (scrh > 0) {
                            obj.css({ position: "absolute", left: left, top: top });
                        }
                    })
                }
            }
        },

        //ajax辅助
        ajaxhelper: {
        error: function (msg, action) {
            if (action != null) {
                action(msg);
            }
            try {
                console.log(msg);
            } catch (e) {

            }
        }
        },

        /*********************************浏览器操作*********************************/
        /*浏览获取操作*/
        request: {
            queryString: function () {
                var s1;
                var q = {}
                var s = document.location.search.substring(1);
                s = s.split("&");
                for (var i = 0, l = s.length; i < l; i++) {
                    s1 = s[i].split("=");
                    if (s1.length > 1) {
                        var t = s1[1].replace(/\+/g, " ")
                        try {
                            q[s1[0]] = decodeURIComponent(t)
                        } catch (e) {
                            q[s1[0]] = unescape(t)
                        }
                    }
                }
                return q;
            },
            url: function () {
                return window.location.href;
            },
            urlEncode: function (str) {
                if (str == null) return "";
                var tempstr = str.replace(/\+/g, encodeURI("%2B"));
                return tempstr;
            },
            domain: function () {
                return window.location.host;
            },
            pageName: function () {
                var a = location.href;
                var b = a.split("/");
                var c = b.slice(b.length - 1, b.length).toString(String).split(".");
                return c.slice(0, 1);
            },
            pageFullName: function () {
                var strUrl = location.href;
                var arrUrl = strUrl.split("/");
                var strPage = arrUrl[arrUrl.length - 1];
                return strPage;
            },
            back: function () {
                history.go(-1);
            },
            getCookie: function (cookieName) {
                var cookieValue = document.cookie;
                var cookieStartAt = cookieValue.indexOf("" + cookieName + "=");
                if (cookieStartAt == -1) {
                    cookieStartAt = cookieValue.indexOf(cookieName + "=");
                }
                if (cookieStartAt == -1) {
                    cookieValue = null;
                }
                else {
                    cookieStartAt = cookieValue.indexOf("=", cookieStartAt) + 1;
                    cookieEndAt = cookieValue.indexOf(";", cookieStartAt);
                    if (cookieEndAt == -1) {
                        cookieEndAt = cookieValue.length;
                    }
                    cookieValue = unescape(cookieValue.substring(cookieStartAt, cookieEndAt));//解码latin-1  
                }
                return cookieValue;
            },
            //打印
            print: function (id/*需要打印的最外层元素ID*/) {
                var el = document.getElementById(id);
                var iframe = document.createElement('IFRAME');
                var doc = null;
                iframe.setAttribute('style', 'position:absolute;width:0px;height:0px;left:-500px;top:-500px;');
                document.body.appendChild(iframe);
                doc = iframe.contentWindow.document;
                doc.write('<div>' + el.innerHTML + '</div>');
                doc.close();
                iframe.contentWindow.focus();
                iframe.contentWindow.print();
                if (navigator.userAgent.indexOf("MSIE") > 0) {
                    document.body.removeChild(iframe);
                }
            },
            //加入收藏夹
            addFavorite: function (surl, stitle) {
                try {
                    window.external.addFavorite(surl, stitle);
                } catch (e) {
                    try {
                        window.sidebar.addpanel(stitle, surl, "");
                    } catch (e) {
                        alert("加入收藏失败,请使用ctrl+d进行添加");
                    }
                }
            },
            //设为首页
            setHome: function (obj, vrl) {
                try {
                    obj.style.behavior = 'url(#default#homepage)';
                    obj.sethomepage(vrl);
                } catch (e) {
                    if (window.netscape) {
                        try {
                            netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
                        } catch (e) {
                            alert("此操作被浏览器拒绝!\n请在浏览器地址栏输入'about:config'并回车\n然后将[signed.applets.codebase_principal_support]的值设置为'true',双击即可。");
                        }
                    } else {
                        alert("抱歉，您所使用的浏览器无法完成此操作。\n\n您需要手动设置为首页。");
                    }
                }
            }
        },

        /*浏览器请求操作*/
        response: {
            setCookie: function (name, value, time) {
                if (time == null) {
                    time = 30 * 60 * 1000
                }
                //设置名称为name,值为value的Cookie
                var expdate = new Date();   //初始化时间
                expdate.setTime(expdate.getTime() + time);   //时间
                document.cookie = name + "=" + value + ";expires=" + expdate.toGMTString() + ";path=/";

                //即document.cookie= name+"="+value+";path=/";   时间可以不要，但路径(path)必须要填写，因为JS的默认路径是当前页，如果不填，此cookie只在当前页面生效！~
            },
            open: function (url, params) {
                if (params == null || params == "") {
                    window.open(url);
                } else {
                    if (jQuery.linq.contains(url.toString(), "?")) {
                        var rurl = url + "&" + jQuery.param(params);
                        window.open(rurl);
                    } else {
                        var rurl = url + "?" + jQuery.param(params);
                        window.open(rurl);
                    }
                }
            },
            //页面跳转
            redirect: function (url, params) {
                if (params == null || params == "") {
                    window.location.href = url;
                } else {
                    if (jQuery.linq.contains(url.toString(), "?")) {
                        var rurl = url + "&" + jQuery.param(params);
                        window.location.href = rurl;
                    } else {
                        var rurl = url + "?" + jQuery.param(params);
                        window.location.href = rurl;
                    }
                }
            }

        },

        /*浏览器判段*/
        broVali: {
            //jquery1.9以上只需要判段IE
            isIE: function () {
                if (!!window.ActiveXObject || "ActiveXObject" in window)
                    return true;
                else
                    return false;
            },
            //老版本jquery用下面的函数
            isIE6: function () {
                var flag = false;
                if ($.browser.msie && $.browser.version == "6.0")
                    flag = true;
                return flag;
            },
            isIE7: function () {
                var flag = false;
                if ($.browser.msie && $.browser.version == "7.0")
                    flag = true;
                return flag;
            },
            isIE8: function () {
                var flag = false;
                if ($.browser.msie && $.browser.version == "8.0")
                    flag = true;
                return flag;
            },
            isIE9: function () {
                var flag = false;
                if ($.browser.msie && $.browser.version == "9.0")
                    flag = true;
                return flag;
            },
            isIE10: function () {
                var flag = false;
                if ($.browser.msie && $.browser.version == "10.0")
                    flag = true;
                return flag;
            },
            isIE11: function () {
                var flag = false;
                if ($.browser.msie && $.browser.version == "11.0")
                    flag = true;
                return flag;
            },
            isMozilla: function () {
                var flag = false;
                if ($.browser.mozilla)
                    flag = true;
                return flag;
            },
            isOpera: function () {
                var flag = false;
                if ($.browser.opera)
                    flag = true;
                return flag;
            },
            isSafri: function () {
                var flag = false;
                if ($.browser.safari)
                    flag = true;
                return flag;
            },
            isMobile: function () {
                var userAgentInfo = navigator.userAgent;
                var Agents = new Array("Android", "iPhone", "SymbianOS", "Windows Phone", "iPad", "iPod");
                var flag = false;
                for (var v = 0; v < Agents.length; v++) {
                    if (userAgentInfo.indexOf(Agents[v]) > 0) { flag = true; break; }
                }

                return flag;
            },
            isIPhone: function () {
                var Agents = new Array("Android", "iPhone", "SymbianOS", "Windows Phone", "iPad", "iPod");
                return jQuery.jQueryAny(Agents, function (v) {
                    return v == "iPhone";
                });
            },
            isAndroid: function () {
                var Agents = new Array("Android", "iPhone", "SymbianOS", "Windows Phone", "iPad", "iPod");
                return jQuery.jQueryAny(Agents, function (v) {
                    return v == "Android";
                });
            }
        }

    });

    /*********************************模板解析引擎 by 2016-8-2*****************/
    $(function () {
        //通用正则
        var FN_ARGS = /^function\s*[^\(]*\(\s*([^\)]*)\)/m;
        var FN_ARG_SPLIT = /,/;
        var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
        var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
        window.$ejqApp = {};
        $ejqApp.apps = [];
        function setModule(fn, ctr) {
            var pars = [];
            var fnText = fn.toString().replace(STRIP_COMMENTS, '');
            argDecl = fnText.match(FN_ARGS);
            forEach(argDecl[1].split(FN_ARG_SPLIT), function (arg) {
                arg.replace(FN_ARG, function (all, underscore, name) {
                    pars.push({ name: name });
                });
            });
            var queueItem = { controller: ctr, pars: pars };
            return queueItem;
        }
        $ejqApp.module = function (app, obj) {
            var apps = $.linq.where($ejqApp.apps, function (v) { return v.appName == app });
            var isAny = apps != null && apps.length > 0;
            if (isAny) {
                return apps[0];
            } else {
                var reval = {
                    appName: app,
                    templateHtml: $("[ ng-app=\"" + app + "\"]").html(),
                    getObj: function () { return $("[ ng-app=\"" + app + "\"]") },
                    controller: function (ctr, obj) {
                        var th = this;
                        var app = this.getObj();
                        var ctrObj = app.find("[ng-controller='" + ctr + "']");
                        var queueItem = setModule(obj, ctrObj);
                        $.each(queueItem.pars, function (i, v) {
                            if (v.name == "$con") {
                                v.getObj = function () {
                                    return th.getObj().find("[ng-controller='" + ctr + "']");
                                };
                            }
                            if (v.name == "$app") {
                                v.getObj = function (selector) {
                                    return th.getObj();
                                }
                            }
                            if (v.name == "$tool") {
                                v.method = {}
                            }

                            if (v.name == "$event") {
                                v.getObj = function (selector) {
                                    return th.getObj();
                                }
                            }
                        })

                        obj.apply(new function () { }, queueItem.pars);
                        queueItem.name = ctr;
                        this.controllerParas = { pars: queueItem };
                    }
                };
                $ejqApp.apps.push(reval);
                return reval;
            }
        }
        $ejqApp.apps.bind = function () {
            $($ejqApp.apps).each(function (i, v) {
                var appObj = v.getObj();
                appObj.html(v.templateHtml);
                var th = v;
                $.each(v.controllerParas, function (i, pars) {
                    var obj = appObj.find("[ng-controller='" + pars.name + "']");
                    $.each(pars.pars, function (i, par) {
                        switch (par.name) {
                            case "$scope":
                                $scope(obj, par);
                                break;
                            case "$http":
                                $http(obj, par);
                                break;
                        }
                    })
                })
            })
        }
        function $scope(obj, par) {
            var kvs = $.action.jsonDictionary(par)
            $.each(kvs, function (i, v) {
                if (v.key == "name") return;
                var isArray = $.valiType.isArray(v);
                if (isArray) {
                    resolveArray(v.key, obj, v.value)
                } else {
                    resolveJson(v.key, obj, v.value)
                }
            })
        }
        function $http(obj, par) {
            var kvs = $.action.jsonDictionary(par)
            var kv = $.linq.single(kvs, function (v) {
                return $.valiType.isObject(v.value);
            });
            if (kv == null) return;
            var ajaxSetting = kv.value;
            if (ajaxSetting != null) {

                if (ajaxSetting.cache == null) {
                    ajaxSetting.cache = false;
                }
                $.ajax({
                    url: ajaxSetting.url,
                    cache: ajaxSetting.cache,
                    dataType: "json",
                    type: ajaxSetting.type,
                    success: function (msg) {
                        var isArray = $.valiType.isArray(msg);
                        if (isArray) {
                            resolveArray(kv.key, obj, msg)
                        } else {

                            resolveJson(kv.key, obj, msg)
                        }
                        if (ajaxSetting.success != null) {
                            ajaxSetting.success(msg);
                        }

                    },
                    error: function (msg) {
                        if (ajaxSetting.error != null) {
                            ajaxSetting.error(msg);
                        }
                    }
                });
            }
        }
        function resolveJson(name, obj, json, prefix) {
            if (prefix == null) prefix = "";
            var kvs = $.action.jsonDictionary(json)
            var dataHtml = obj.data("myng-html");
            var innerHtml = obj.html();
            if (dataHtml == null) {
                innerHtml = obj.html();
            } else {
                innerHtml = dataHtml;
            }
            var funs = [];
            if (innerHtml != null && innerHtml != "") {
                $.each(kvs, function (i, v) {
                    var isArray = $.valiType.isArray(v.value);
                    if (isArray) {
                        funs.push({ name: v.key, obj: obj, value: v.value, prefix: name });
                    } else {
                        innerHtml = innerHtml.replace(new RegExp("\{\{" + prefix + name + "\." + v.key + "\}\}","g"), v.value);
                    }
                })
                obj.html(innerHtml);
                obj.data("myng-html", innerHtml);
                $.each(funs, function (i, v) {
                    resolveArray(v.name, v.obj, v.value, v.prefix);
                })
            }
        }
        function resolveArray(name, obj, json, prefix) {
            obj.find("[ng-repeat]").each(function () {
                var th = $(this);
                var innerTemplate = th.html();
                var repeatValue = th.attr("ng-repeat");
                var thisPrefix = prefix == null ? "" : prefix+".";
                var reg = new RegExp("([a-z,A-Z][0-9,a-z,A-Z]*)\\s+in\\s+" + thisPrefix + name);
                if (reg.test(repeatValue)) {
                    th.html("");
                    var itemName = repeatValue.match(reg)[1];
                    $.each(json, function (i, jsonItem) {
                        var kvs = $.action.jsonDictionary(jsonItem)
                        var appendItem = innerTemplate;
                        $.each(kvs, function (i, v) {
                            var isArray = $.valiType.isArray(v.value);
                            if (isArray) {
                                resolveArray(v.key, obj, v.value, name);
                            } else {
                                appendItem = appendItem.replace(new RegExp("\{\{" + itemName + "\." + v.key + "\}\}","g"), v.value);
                            }
                        })
                        th.append(appendItem);
                    });
                }
            })
            var dataHtml = obj.data("myng-html", obj.html());
        }
        function forEach(obj, iterator, context) {
            var key, length;
            if (obj) {
                if ($.valiType.isFunction(obj)) {
                    for (key in obj) {
                        if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {
                            iterator.call(context, obj[key], key, obj);
                        }
                    }
                } else if ($.valiType.isArray(obj) || $.valiType.isArrayLike(obj)) {
                    var isPrimitive = typeof obj !== 'object';
                    for (key = 0, length = obj.length; key < length; key++) {
                        if (isPrimitive || key in obj) {
                            iterator.call(context, obj[key], key, obj);
                        }
                    }
                } else if (obj.forEach && obj.forEach !== forEach) {
                    obj.forEach(iterator, context, obj);
                } else if (isBlankObject(obj)) {
                    for (key in obj) {
                        iterator.call(context, obj[key], key, obj);
                    }
                } else if (typeof obj.hasOwnProperty === 'function') {
                    for (key in obj) {
                        if (obj.hasOwnProperty(key)) {
                            iterator.call(context, obj[key], key, obj);
                        }
                    }
                } else {
                    for (key in obj) {
                        if (hasOwnProperty.call(obj, key)) {
                            iterator.call(context, obj[key], key, obj);
                        }
                    }
                }
            }
            return obj;
        }

    })


    /*********************************form操作*********************************/
    jQuery.fn.extend({
        //获取元素属性以","隔开
        attrToStr: function (attr) {
            var reval = "";
            this.each(function () {
                reval += jQuery(this).attr(attr) + ","
            })
            reval = jQuery.jQueryAction.trimEnd(reval, ",");
            return reval;
        },
        //清空表单
        formClear: function () {
            this.find("input:text,select,input:hidden,input:password").each(function () {
                $(this).val("");
            });
            this.find("input:checkbox,input:radio").each(function () {
                $(this).removeAttr("checked");
            });
        },
        //将json对象自动填充到表单 
        //例如 $('form').formFill({data:{id:1},prefix:"user."}) 填充后  <input name='user.id' value='1' >
        formFill: function (option) {
            var prefix = option.prefix;
            if (prefix == undefined) prefix = "";
            var frmData = option.data;
            for (i in frmData) {
                var dataKey = i;
                var thisData = this.find("[name='" + prefix + i + "']");
                var text = "text";
                var hidden = "hidden";
                if (thisData != null) {
                    var thisDataType = thisData.attr("type");
                    var val = frmData[i];
                    var isdata = (val != null && val.toString().lastIndexOf("/Date(") != -1);
                    if (thisDataType == "radio") {
                        thisData.filter("[value=" + val + "]").attr("checked", "checked")
                        if (val == true || val == "0") val = "True";
                        else if (val == false || val != "0") val = "False";
                        thisData.filter("[value=" + val + "]").not("donbool").attr("checked", "checked")
                    } else if (thisDataType == "checkbox") {
                        if (thisData.size() == 1) {
                            if (val == "true" || val == 1 || val == "True" || val == "1") {
                                thisData.attr("checked", "checked");
                            } else {
                                thisData.removeAttr("checked");
                            }
                        } else {

                            thisData.removeAttr("checked");
                            var cbIndex = i;
                            if (val.lastIndexOf(",") == -1) {
                                this.find("[name='" + prefix + dataKey + "'][value='" + prefix + val + "']").attr("checked", "checked");
                            } else {
                                jQuery(val.split(',')).each(function (i, v) {
                                    this.find("[name='" + prefix + dataKey + "'][value='" + prefix + v + "']").attr("checked", "checked");;
                                })
                            }
                        }

                    } else {
                        if (isdata) {
                            val = jQuery.Convert.jsonReductionDate(val);
                        }
                        if (val == "null" || val == null)
                            val = "";
                        if (val == "" && thisData.attr("watertitle") == thisData.val()) {
                        } else {
                            thisData.val(val + "");
                            thisData.removeClass("watertitle")
                        }
                    }
                }

            }

        }


    });

 
    /*********************************通用属性扩展*****************************/
    jQuery.ejqInit = function () {
        String.prototype.ejq_format = function (args) {
            var _dic = typeof args === "object" ? args : arguments;
            var reval = this.replace(/\{([^{}]+)\}/g, function (str, key) {
                return _dic[key];
            });
            return reval;
        }
        String.prototype.ejq_append = function (args) {
            return this + args;
        }
        String.prototype.ejq_appendFormat = function (appendValue, appendArgs) {
            return this + appendValue.ejq_format(appendArgs);
        }
        String.prototype.ejq_selector = function (args) {
            return $(this);
        }
        String.prototype.ejq_toFixed = Number.prototype.ejq_toFixed = function (d) {
            var s = this + ""; if (!d) d = 0;
            if (s.indexOf(".") == -1) s += "."; s += new Array(d + 1).join("0");
            if (new RegExp("^(-|\\+)?(\\d+(\\.\\d{0," + (d + 1) + "})?)\\d*$").test(s)) {
                var s = "0" + RegExp.$2, pm = RegExp.$1, a = RegExp.$3.length, b = true;
                if (a == d + 2) {
                    a = s.match(/\d/g); if (parseInt(a[a.length - 1]) > 4) {
                        for (var i = a.length - 2; i >= 0; i--) {
                            a[i] = parseInt(a[i]) + 1;
                            if (a[i] == 10) { a[i] = 0; b = i != 1; } else break;
                        }
                    }
                    s = a.join("").replace(new RegExp("(\\d+)(\\d{" + d + "})\\d$"), "$1.$2");
                } if (b) s = s.substr(1); return (pm + s).replace(/\.$/, "");
            } return this + "";
        };

    }
    jQuery.ejqInit();

})(window, jQuery)

//从index弹出窗
function openIndexWindows(w,h,title,url){
	if (w>=900)
	   w=findDimensions_width()*0.85;
	   	if (h>=530)
	   w=findDimensions_height()*0.85;
    window.top.layeropen(w,h,title,url)
   }
//关闭弹出窗体
function closeIndexWindwos(index){
	if(index!=undefined&&index!=null)
	{
		parent.layer.close(index);
	}
	else
	  parent.layer.closeAll(); //关闭所有的iframe层
}
function layeropen(w, h, title, url) {
	//iframe窗
	layer.open({
		type: 2,
		title: title,
		closeBtn: 1, //不显示关闭按钮
		shade: [0.3, '#000000'],
		area: [w + 'px', h + 'px'],
		offset: 'auto', //右下角弹出
		shift: 0,
		content: url //iframe的url，no代表不显示滚动条
	});
	}
//获取首页为活动中的IFram窗体
//用于弹窗调用
function GetIndexActiveIframe(){
	var dlp=$(window.parent.document);
	var returnParent=null;
	var active=dlp.find(".J_menuTab.active");
	var t = $(active).data("id");
			dlp.find(".J_mainContent .J_iframe").each(function() {
				if($(this).data("id") == t)
				 returnParent=this;
			});
	return returnParent.contentWindow;
}
//layer弹窗方法包含 alert、confirm

function layerSuccess(msg,callback){
	layer.alert(msg,{icon: 1},function(index){
        callback&&callback();
        layer.close(index);
    });
}
function layerError(msg,callback){
	layer.alert(msg,{icon: 11},function(index){
        callback&&callback();
        layer.close(index);
    });
}
function layerInfo(msg,callback){
	layer.alert(msg,{icon: 0},function(index){
        callback&&callback();
        layer.close(index);
    });
}
function layerConfirm(msg,success,cancel){
 layer.confirm(msg, {icon: 4, title:'提示'}, function(index){
  	success&&success();
    layer.close(index);
},cancel);
}
function layerMsg(msg){
	layer.msg(msg,{skin: 'layui-layer-msg layui-layer-hui'});
}
//Form表单验证并提交
function formValiPost(formid,url,callback){
	$('#'+formid).validationEngine({
	scroll: false,
  autoHidePrompt:true,//自动隐藏错误
 autoHideDelay:1000,//延时隐藏时间
  addFailureCssClassToField:"from-myerror",//错误控件显示的class样式
    ajaxFormValidation: true,
    ajaxFormValidationMethod: 'post',
    ajaxFormValidationURL:url,
    onAjaxFormComplete: function(status, form, json, options){
    	callback&&callback(json);
    }
  })
}
/**
 * 
 * @param {Object} formid 表单id
 * @param {Object} url 远程路径
 * @param {Object} valifun 自定义验证方法 返回值 bool
 * @param {Object} callback ajax回调
 */
function formValiPost2(formid,url,valifun,callback) {
    $('#' + formid).validationEngine({
        scroll: false,
        autoHidePrompt: true,//自动隐藏错误
        autoHideDelay: 1000,//延时隐藏时间
        addFailureCssClassToField: "from-myerror",//错误控件显示的class样式
        onValidationComplete: function (form, status) {
            //本方法适用于ajax提交
            //alert('表单是否验证通过？结果：' + status + '，表单不会提交，本方法适用于ajax提交。');
            if (status == true)// 验证通过
            {
                var f = valifun();
                if (f) {
                    var data = form.serialize();
                    $.post(url, data, function (json) {
                        callback && callback(json);
                    },"json")
                }
            }
        }
    });
}
/**
 * 将日期格式化成指定格式的字符串
 * @param date 要格式化的日期，不传时默认当前时间，也可以是一个时间戳
 * @param fmt 目标字符串格式，支持的字符有：y,M,d,q,w,H,h,m,S，默认：yyyy-MM-dd HH:mm:ss
 * @returns 返回格式化后的日期字符串
 * formatDate(); // 2016-09-02 13:17:13
formatDate(new Date(), 'yyyy-MM-dd'); // 2016-09-02
// 2016-09-02 第3季度 星期五 13:19:15:792
formatDate(new Date(), 'yyyy-MM-dd 第q季度 www HH:mm:ss:SSS');
formatDate(1472793615764); // 2016-09-02 13:20:15
 */
function formatDate(date, fmt)
{
    date = date == undefined ? new Date() : date;
    date = typeof date == 'number' ? new Date(date) : date;
    fmt = fmt || 'yyyy-MM-dd HH:mm:ss';
    var obj =
    {
        'y': date.getFullYear(), // 年份，注意必须用getFullYear
        'M': date.getMonth() + 1, // 月份，注意是从0-11
        'd': date.getDate(), // 日期
        'q': Math.floor((date.getMonth() + 3) / 3), // 季度
        'w': date.getDay(), // 星期，注意是0-6
        'H': date.getHours(), // 24小时制
        'h': date.getHours() % 12 == 0 ? 12 : date.getHours() % 12, // 12小时制
        'm': date.getMinutes(), // 分钟
        's': date.getSeconds(), // 秒
        'S': date.getMilliseconds() // 毫秒
    };
    var week = ['日', '一', '二', '三', '四', '五', '六'];
    for(var i in obj)
    {
        fmt = fmt.replace(new RegExp(i+'+', 'g'), function(m)
        {
            var val = obj[i] + '';
            if(i == 'w') return (m.length > 2 ? '星期' : '周') + week[val];
            for(var j = 0, len = val.length; j < m.length - len; j++) val = '0' + val;
            return m.length == 1 ? val : val.substring(val.length - m.length);
        });
    }
    return fmt;
}

/**
 * 将字符串解析成日期
 * @param str 输入的日期字符串，如'2014-09-13'
 * @param fmt 字符串格式，默认'yyyy-MM-dd'，支持如下：y、M、d、H、m、s、S，不支持w和q
 * @returns 解析后的Date类型日期
 parseDate('2016-08-11'); // Thu Aug 11 2016 00:00:00 GMT+0800
parseDate('2016-08-11 13:28:43', 'yyyy-MM-dd HH:mm:ss') // Thu Aug 11 2016 
 */
function parseDate(str, fmt)
{
    fmt = fmt || 'yyyy-MM-dd';
    var obj = {y: 0, M: 1, d: 0, H: 0, h: 0, m: 0, s: 0, S: 0};
    fmt.replace(/([^yMdHmsS]*?)(([yMdHmsS])\3*)([^yMdHmsS]*?)/g, function(m, $1, $2, $3, $4, idx, old)
    {
        str = str.replace(new RegExp($1+'(\\d{'+$2.length+'})'+$4), function(_m, _$1)
        {
            obj[$3] = parseInt(_$1);
            return '';
        });
        return '';
    });
    obj.M--; // 月份是从0开始的，所以要减去1
    var date = new Date(obj.y, obj.M, obj.d, obj.H, obj.m, obj.s);
    if(obj.S !== 0) date.setMilliseconds(obj.S); // 如果设置了毫秒
    return date;
}

/**
 * =====================================
 *               日期相关方法
 * =====================================
 */
;(function($)
{
    $.extend(
    {
        /**
         * 将日期格式化成指定格式的字符串
         * @param date 要格式化的日期，不传时默认当前时间，也可以是一个时间戳
         * @param fmt 目标字符串格式，支持的字符有：y,M,d,q,w,H,h,m,S，默认：yyyy-MM-dd HH:mm:ss
         * @returns 返回格式化后的日期字符串
         */
        formatDate: function(date, fmt)
        {
            date = date == undefined ? new Date() : date;
            date = typeof date == 'number' ? new Date(date) : date;
            fmt = fmt || 'yyyy-MM-dd HH:mm:ss';
            var obj =
            {
                'y': date.getFullYear(), // 年份，注意必须用getFullYear
                'M': date.getMonth() + 1, // 月份，注意是从0-11
                'd': date.getDate(), // 日期
                'q': Math.floor((date.getMonth() + 3) / 3), // 季度
                'w': date.getDay(), // 星期，注意是0-6
                'H': date.getHours(), // 24小时制
                'h': date.getHours() % 12 == 0 ? 12 : date.getHours() % 12, // 12小时制
                'm': date.getMinutes(), // 分钟
                's': date.getSeconds(), // 秒
                'S': date.getMilliseconds() // 毫秒
            };
            var week = ['天', '一', '二', '三', '四', '五', '六'];
            for(var i in obj)
            {
                fmt = fmt.replace(new RegExp(i+'+', 'g'), function(m)
                {
                    var val = obj[i] + '';
                    if(i == 'w') return (m.length > 2 ? '星期' : '周') + week[val];
                    for(var j = 0, len = val.length; j < m.length - len; j++) val = '0' + val;
                    return m.length == 1 ? val : val.substring(val.length - m.length);
                });
            }
            return fmt;
        },
        /**
         * 将字符串解析成日期
         * @param str 输入的日期字符串，如'2014-09-13'
         * @param fmt 字符串格式，默认'yyyy-MM-dd'，支持如下：y、M、d、H、m、s、S，不支持w和q
         * @returns 解析后的Date类型日期
         */
        parseDate: function(str, fmt)
        {
            fmt = fmt || 'yyyy-MM-dd';
            var obj = {y: 0, M: 1, d: 0, H: 0, h: 0, m: 0, s: 0, S: 0};
            fmt.replace(/([^yMdHmsS]*?)(([yMdHmsS])\3*)([^yMdHmsS]*?)/g, function(m, $1, $2, $3, $4, idx, old)
            {
                str = str.replace(new RegExp($1+'(\\d{'+$2.length+'})'+$4), function(_m, _$1)
                {
                    obj[$3] = parseInt(_$1);
                    return '';
                });
                return '';
            });
            obj.M--; // 月份是从0开始的，所以要减去1
            var date = new Date(obj.y, obj.M, obj.d, obj.H, obj.m, obj.s);
            if(obj.S !== 0) date.setMilliseconds(obj.S); // 如果设置了毫秒
            return date;
        },
        /**
         * 将一个日期格式化成友好格式，比如，1分钟以内的返回“刚刚”，
         * 当天的返回时分，当年的返回月日，否则，返回年月日
         * @param {Object} date
         */
        formatDateToFriendly: function(date)
        {
            date = date || new Date();
            date = typeof date === 'number' ? new Date(date) : date;
            var now = new Date();
            if((now.getTime() - date.getTime()) < 60*1000) return '刚刚'; // 1分钟以内视作“刚刚”
            var temp = this.formatDate(date, 'yyyy年M月d');
            if(temp == this.formatDate(now, 'yyyy年M月d')) return this.formatDate(date, 'HH:mm');
            if(date.getFullYear() == now.getFullYear()) return this.formatDate(date, 'M月d日');
            return temp;
        },
        /**
         * 将一段时长转换成友好格式，如：
         * 147->“2分27秒”
         * 1581->“26分21秒”
         * 15818->“4小时24分”
         * @param {Object} second
         */
        formatDurationToFriendly: function(second)
        {
            if(second < 60) return second + '秒';
            else if(second < 60*60) return (second-second%60)/60+'分'+second%60+'秒';
            else if(second < 60*60*24) return (second-second%3600)/60/60+'小时'+Math.round(second%3600/60)+'分';
            return (second/60/60/24).toFixed(1)+'天';
        },
        /** 
         * 将时间转换成MM:SS形式 
         */
        formatTimeToFriendly: function(second)
        {
            var m = Math.floor(second / 60);
            m = m < 10 ? ( '0' + m ) : m;
            var s = second % 60;
            s = s < 10 ? ( '0' + s ) : s;
            return m + ':' + s;
        },
        /**
         * 判断某一年是否是闰年
         * @param year 可以是一个date类型，也可以是一个int类型的年份，不传默认当前时间
         */
        isLeapYear: function(year)
        {
            if(year === undefined) year = new Date();
            if(year instanceof Date) year = year.getFullYear();
            return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
        },
        /**
         * 获取某一年某一月的总天数，没有任何参数时获取当前月份的
         * 方式一：$.getMonthDays();
         * 方式二：$.getMonthDays(new Date());
         * 方式三：$.getMonthDays(2013, 12);
         */
        getMonthDays: function(date, month)
        {
            var y, m;
            if(date == undefined) date = new Date();
            if(date instanceof Date)
            {
                y = date.getFullYear();
                m = date.getMonth();
            }
            else if(typeof date == 'number')
            {
                y = date;
                m = month-1;
            }
            var days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // 非闰年的一年中每个月份的天数
            //如果是闰年并且是2月
            if(m == 1 && this.isLeapYear(y)) return days[m]+1;
            return days[m];
        },
        /**
         * 计算2日期之间的天数，用的是比较毫秒数的方法
         * 传进来的日期要么是Date类型，要么是yyyy-MM-dd格式的字符串日期
         * @param date1 日期一
         * @param date2 日期二
         */
        countDays: function(date1, date2)
        {
            var fmt = 'yyyy-MM-dd';
            // 将日期转换成字符串，转换的目的是去除“时、分、秒”
            if(date1 instanceof Date && date2 instanceof Date)
            {
                date1 = this.format(fmt, date1);
                date2 = this.format(fmt, date2);
            }
            if(typeof date1 === 'string' && typeof date2 === 'string')
            {
                date1 = this.parse(date1, fmt);
                date2 = this.parse(date2, fmt);
                return (date1.getTime() - date2.getTime()) / (1000*60*60*24);
            }
            else
            {
                console.error('参数格式无效！');
                return 0;
            }
        }
    });
})(jQuery);